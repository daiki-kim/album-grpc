// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/album.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlbumService_GetAlbum_FullMethodName        = "/album.AlbumService/GetAlbum"
	AlbumService_ListAlbums_FullMethodName      = "/album.AlbumService/ListAlbums"
	AlbumService_GetTotalAmount_FullMethodName  = "/album.AlbumService/GetTotalAmount"
	AlbumService_UploadAndNotify_FullMethodName = "/album.AlbumService/UploadAndNotify"
)

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error)
	ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAlbumsResponse], error)
	GetTotalAmount(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetTotalAmountRequest, GetTotalAmountResponse], error)
	UploadAndNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadAndNotifyRequest, UploadAndNotifyResponse], error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlbumResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) ListAlbums(ctx context.Context, in *ListAlbumsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAlbumsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AlbumService_ServiceDesc.Streams[0], AlbumService_ListAlbums_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAlbumsRequest, ListAlbumsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_ListAlbumsClient = grpc.ServerStreamingClient[ListAlbumsResponse]

func (c *albumServiceClient) GetTotalAmount(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetTotalAmountRequest, GetTotalAmountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AlbumService_ServiceDesc.Streams[1], AlbumService_GetTotalAmount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTotalAmountRequest, GetTotalAmountResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_GetTotalAmountClient = grpc.ClientStreamingClient[GetTotalAmountRequest, GetTotalAmountResponse]

func (c *albumServiceClient) UploadAndNotify(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadAndNotifyRequest, UploadAndNotifyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AlbumService_ServiceDesc.Streams[2], AlbumService_UploadAndNotify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadAndNotifyRequest, UploadAndNotifyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_UploadAndNotifyClient = grpc.BidiStreamingClient[UploadAndNotifyRequest, UploadAndNotifyResponse]

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility.
type AlbumServiceServer interface {
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error)
	ListAlbums(*ListAlbumsRequest, grpc.ServerStreamingServer[ListAlbumsResponse]) error
	GetTotalAmount(grpc.ClientStreamingServer[GetTotalAmountRequest, GetTotalAmountResponse]) error
	UploadAndNotify(grpc.BidiStreamingServer[UploadAndNotifyRequest, UploadAndNotifyResponse]) error
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlbumServiceServer struct{}

func (UnimplementedAlbumServiceServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) ListAlbums(*ListAlbumsRequest, grpc.ServerStreamingServer[ListAlbumsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAlbums not implemented")
}
func (UnimplementedAlbumServiceServer) GetTotalAmount(grpc.ClientStreamingServer[GetTotalAmountRequest, GetTotalAmountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTotalAmount not implemented")
}
func (UnimplementedAlbumServiceServer) UploadAndNotify(grpc.BidiStreamingServer[UploadAndNotifyRequest, UploadAndNotifyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAndNotify not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}
func (UnimplementedAlbumServiceServer) testEmbeddedByValue()                      {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlbumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_ListAlbums_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAlbumsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlbumServiceServer).ListAlbums(m, &grpc.GenericServerStream[ListAlbumsRequest, ListAlbumsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_ListAlbumsServer = grpc.ServerStreamingServer[ListAlbumsResponse]

func _AlbumService_GetTotalAmount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlbumServiceServer).GetTotalAmount(&grpc.GenericServerStream[GetTotalAmountRequest, GetTotalAmountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_GetTotalAmountServer = grpc.ClientStreamingServer[GetTotalAmountRequest, GetTotalAmountResponse]

func _AlbumService_UploadAndNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlbumServiceServer).UploadAndNotify(&grpc.GenericServerStream[UploadAndNotifyRequest, UploadAndNotifyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AlbumService_UploadAndNotifyServer = grpc.BidiStreamingServer[UploadAndNotifyRequest, UploadAndNotifyResponse]

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbum",
			Handler:    _AlbumService_GetAlbum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAlbums",
			Handler:       _AlbumService_ListAlbums_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTotalAmount",
			Handler:       _AlbumService_GetTotalAmount_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadAndNotify",
			Handler:       _AlbumService_UploadAndNotify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/album.proto",
}
